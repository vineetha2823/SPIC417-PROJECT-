import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import  LinearRegression
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import accuracy_score, classification_report, mean_squared_error, r2_score
df = pd.read_csv('bmi.csv')
df.head()
df.shape
df.info()
cats = df.select_dtypes(include='object').columns.tolist()
nums = df.select_dtypes(exclude='object').columns.tolist()
df[cats].describe()
df[nums].describe()
label_encoder = LabelEncoder()
df['BmiClass'] = label_encoder.fit_transform(df['BmiClass'])
df.head()
x = df[['Age', 'Height', 'Weight']]
y = df['Bmi']
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
print('X_train shape: ',X_train.shape)
print('X_test shape: ',X_test.shape)
print('y_train shape: ',y_train.shape)
print('y_test shape: ',y_test.shape)
lin_reg = LinearRegression()
lin_reg.fit(X_train, y_train)
y_pred_lin = lin_reg.predict(X_test)
print('Mean Squared Error: ',mean_squared_error(y_test, y_pred_lin))
print('R-Squared: ',r2_score(y_test, y_pred_lin))
score = cross_val_score(lin_reg, x, y, cv=5)
score.mean()
threshold = 0.10
accurate_predictions = np.sum(np.abs((y_test - y_pred_lin) / y_test) <= threshold)
total_predictions = len(y_test)
accuracy = accurate_predictions / total_predictions
print('Accuracy (within {:.2%}): {:.2%}'.format(threshold, accuracy))
